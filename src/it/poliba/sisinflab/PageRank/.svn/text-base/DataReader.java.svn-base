package it.poliba.sisinflab.PageRank;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;



public class DataReader {

	private String matrixFileName = null;	
	private String artistFilename = null;
	private String propFilename = null;
	
	
	public DataReader(String rootDir) {		
		this.matrixFileName = rootDir + "aset-opennap-sim.txt";		
		this.artistFilename = rootDir + "ArtistList.txt";		
		this.propFilename = rootDir + "propList5.txt";
		
	}
	
	public List<String> readSimilarityArtist(String filename){
		
		List<String> ret = new ArrayList<String>();		
		String line="",URI="";			
		String[] vals = null;
		float val=0;
		BufferedReader reader = null;
	
		try {
			reader = new BufferedReader(new FileReader(filename));		
			try {
				while ((line = reader.readLine()) != null) {				
					vals = line.split("\t");
					URI = vals[0].trim();
					//if(!URI.contains("<"))
					ret.add(URI);									
				}
			} finally {
				reader.close();
			}			

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return ret;
	}
		
	
	public ArrayList<List<String>> readResultMatrix(String filename) {
		
		ArrayList<List<String>> ArtistMatrix = new ArrayList<List<String>>();
		
		String line="";
		
		String[] vals = null;
		
		List<String> list;
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));
						
			while ((line = reader.readLine()) != null) {
				
				vals = line.split(",");			
				
				list = new ArrayList<String>();				
				
				for (String sim : vals) {			
					
					list.add(sim.trim());				
				}
				
				ArtistMatrix.add(list);							
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
				
		return ArtistMatrix;
	}
	
	
	/*Read the OpenNap matrix from file*/
	
	public float[][] readOpenNapMatrix(){
		
		String line="";
		
		String[] vals = null;
		
		float[][] matrix = new float[400][400];
		
		int i=0,j=0;
		
		String simVal = "";
				
		try {
			
			BufferedReader reader = new BufferedReader(new FileReader(this.matrixFileName));
						
			while ((line = reader.readLine()) != null) {
			
				vals = line.split(" ");
				
				j=0;
				
				for(int k=0;k<400;k++){
			
					simVal = vals[k].trim();
															
					matrix[i][j] = Float.parseFloat(simVal);
					
					j+=1;								
				}
				i+=1;			
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return matrix;		
	}
		
	
	/* Load the list of artists that is used for the similarity calculation */
		
	public Map<String, List<String>> readArtistList(String filename) {	
		
		Map<String, List<String>> list = new HashMap<String, List<String>>();
		String line="",node1="",node2="";
		List<String> nodes = new ArrayList<String>();
		String[] vals = null;
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));		
			while ((line = reader.readLine()) != null) {				
				line = line.trim();
				vals = line.split("\t");
				node1= vals[0].trim();
				node2= vals[1].trim();		
				
				if(!list.containsKey(node1)){
					nodes = new ArrayList<String>();
					list.put(node1, nodes);					
				} else {
					nodes = list.get(node1);
					nodes.add(node2);
					list.put(node1, nodes);										
				}						
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	
		return list;		
	}
		
	public List<String> readArtistList2(String filename) {		
		List<String> ret = new ArrayList<String>();				
		String line="";				
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));						
			while ((line = reader.readLine()) != null) {				
				line = line.trim();				
				ret.add(line);							
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return ret;		
	}
	
	
	public List<String> readResultPyramid(String filename) {
		
		List<String> ret = new ArrayList<String>();
				
		String line="";
		
		String[] vals = null;
				
		try {
			
			BufferedReader reader = new BufferedReader(new FileReader(filename));
						
			while ((line = reader.readLine()) != null) {
				
				line = line.trim();
				
				vals = line.split(",");
				
				for (String sim : vals) {			
					ret.add(sim.trim());						
				}
															
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return ret;		
	}
	
	
	
	public Map<String, Integer> readAset400List() {
		
		Map<String, Integer> ret = new HashMap<String, Integer>();
		
		int index = 0;
				
		String line="";
				
		try {
			BufferedReader reader = new BufferedReader(new FileReader("/home/nguyen/Public/Evaluation/aset400.txt"));
						
			while ((line = reader.readLine()) != null) {
				
				line = line.trim();
				
				ret.put(line, index);							
				
				index += 1;				
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
				
		
		return ret;
		
	}
	
	
	/* Load the matrix of artists that is used for the similarity calculation */
	
	public ArrayList<List<String>> readArtistMatrix() {
		
		ArrayList<List<String>> ArtistMatrix = new ArrayList<List<String>>();
		
		String line="";
		
		String[] vals = null;
		
		List<String> list;
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(this.artistFilename));
						
			while ((line = reader.readLine()) != null) {
				
				vals = line.split("\t");
			
				String artist = vals[0].trim();
				
				list = new ArrayList<String>();
				
				list.add("http://dbpedia.org/resource/" + artist);
								
				if (vals.length > 1) {				

					String l = vals[1].replace("[", "").replace("]", "").replace(" ", "").trim();

					String[] res = l.split(",");
					
					for (String r : res) {			
						list.add("http://dbpedia.org/resource/" + r);						
					}				
				}
				//System.out.println("\n");
				
				ArtistMatrix.add(list);							
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
				
		return ArtistMatrix;
	}
	
	
	public ArrayList<List<String>> readProperties() {
		
		ArrayList<List<String>> props = new ArrayList<List<String>>();
		
		String line="";
		
		String[] vals = null;
		
		List<String> list;
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(this.propFilename));
						
			while ((line = reader.readLine()) != null) {

				list = new ArrayList<String>();

				String l = line.replace("[", "").replace("]", "").replace(" ", "").trim();

				String[] res = l.split(",");
				
				for (String property : res) {			
					list.add(property);						
				}				
							
				props.add(list);							
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
				
		return props;
	}
		
		
	
	public Map<String, Integer> readDictionary(String filename) {
							
		Map<String, Integer> vector = new HashMap<String, Integer>();
		
		String line = null;
		
		String[] vals = null;
		
		try {
			BufferedReader reader = new BufferedReader(new FileReader(filename));
						
			while ((line = reader.readLine()) != null) {
										
				vals = line.split("\t");
			
				int ID = Integer.parseInt(vals[0].trim());
				
				String URI = vals[1].trim();
		
				vector.put(URI, ID);							
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
						
		return vector;		
	}
		
	
	
		
	
	
}